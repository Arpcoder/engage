{"1461754615838425091":{"created_at":"Fri Nov 19 17:53:53 +0000 2021","id_str":"1461754615838425091","text":"@smoyac @kinlane @OpenApiSpec @AsyncAPISpec @jsonschema Where is this? What did I misss?","users":["smoyac","kinlane","OpenApiSpec","AsyncAPISpec","jsonschema"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461665633591046150":{"created_at":"Fri Nov 19 12:00:18 +0000 2021","id_str":"1461665633591046150","text":"@owenrum This looks cool, but isn't it better to catch the problems BEFORE commit and prevent the commit all together?\nOr, report CI issue in a PR check?","users":["owenrum"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461611534858260481":{"created_at":"Fri Nov 19 08:25:19 +0000 2021","id_str":"1461611534858260481","text":"@CardamoneLuigi @awwscript That library is a much better solution for dynamic form generation than using JSON Schema. Especially if you want to load data dynamically.","users":["CardamoneLuigi","awwscript"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461610278622224390":{"created_at":"Fri Nov 19 08:20:20 +0000 2021","id_str":"1461610278622224390","text":"@CardamoneLuigi @awwscript My suggestion would be dont use JSON Schema. It‚Äôs not designed for generating forms so unless you find a library which provides all the things you want, you‚Äôre going to be wasting a lot of time IMHO.\n\nhttps://t.co/jKu9uSaubn provides a rich JSON powered form builder! I‚Äôd use that","users":["CardamoneLuigi","awwscript"],"urls":["https://surveyjs.io"],"engage":1,"components":["Support"],"areas":["JSON Schema"],"people":["Ben Hutton"]},"1461440297402052613":{"created_at":"Thu Nov 18 21:04:53 +0000 2021","id_str":"1461440297402052613","text":"One thing I struggle with is the dynamic nature of my job.\n\nI have work I schedule, but then I also want to react and participate in active discussions.\n\nI‚Äôve tried to have set times I engage with live discussions, but I don‚Äôt always find it practical.\n\nAny thoughts/tips?","users":[],"urls":[],"engage":1,"people":["Ben Hutton"]},"1461429097645629440":{"created_at":"Thu Nov 18 20:20:23 +0000 2021","id_str":"1461429097645629440","text":"@awwscript @CardamoneLuigi @jsonschema Right, it‚Äôs two different concerns. I‚Äôm hoping we will cover referential integrity in some way in the database vocabulary, but it‚Äôs not going to call out to http with specific paginated responses expected. That‚Äôs more a hypermedia concern.","users":["awwscript","CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["Database","JSON Schema"]},"1461425332192481281":{"created_at":"Thu Nov 18 20:05:25 +0000 2021","id_str":"1461425332192481281","text":"@awwscript @CardamoneLuigi @jsonschema When I said not a common use case, I was specifically talking about pagination. I‚Äôd argue this is a detail mostly related to form or UI generation.\n\nYou know, there‚Äôs an effort to create a form generation vocabulary.","users":["awwscript","CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461413009771880452":{"created_at":"Thu Nov 18 19:16:27 +0000 2021","id_str":"1461413009771880452","text":"@CardamoneLuigi @jsonschema Autocomplete is different from pagination. It‚Äôs more a search. Query string. That‚Äôs really outside the remit of JSON Schema, unless you provide all values. Autocomplete in IDEs is great, but always needs the full schema.","users":["CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Support"],"areas":["IDE","JSON Schema"]},"1461381347080081417":{"created_at":"Thu Nov 18 17:10:38 +0000 2021","id_str":"1461381347080081417","text":"@CardamoneLuigi @jsonschema If you want to get direct access to all the JSON Schema people, we have a great slack server, and open office hours.\nYou can find links to both and more on our recently updated home page üòé","users":["CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Meetings"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461380904094519308":{"created_at":"Thu Nov 18 17:08:53 +0000 2021","id_str":"1461380904094519308","text":"@CardamoneLuigi @jsonschema If you care enough, you could take a look and see if there's an issue here: https://t.co/Er5qzaHjB0 OR you could create one if not.\nIt's not expected that anything will happen with these for some time, but tracking a call to action is still useful. üôè","users":["CardamoneLuigi","jsonschema"],"urls":["https://github.com/json-schema-org/json-schema-vocabularies"],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461380552213381122":{"created_at":"Thu Nov 18 17:07:29 +0000 2021","id_str":"1461380552213381122","text":"@CardamoneLuigi @jsonschema it may seem like a very common use case, but in reality, it isn't, because the solution is OK.\nThere have been some attempts to have external data endpoints, but no one has wanted it enough to make it happen.","users":["CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461380181554339844":{"created_at":"Thu Nov 18 17:06:01 +0000 2021","id_str":"1461380181554339844","text":"@CardamoneLuigi @jsonschema This is actually the solution. Implementations should make no assumptions about having internet access or being able to make HTTP requests.\nI HAVE seen a solution which did this for an ontology, and it's a great example of what could be a vocabulary.","users":["CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461377295982157825":{"created_at":"Thu Nov 18 16:54:33 +0000 2021","id_str":"1461377295982157825","text":"@CardamoneLuigi @jsonschema Alternativly, create a single schema which holds all the values, and reference that from the first schema. That's the only interoperable approach. No pagination though.","users":["CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1461377073356976129":{"created_at":"Thu Nov 18 16:53:40 +0000 2021","id_str":"1461377073356976129","text":"@CardamoneLuigi @jsonschema I don't believe there's currently any tooling that would support such a thing. Sorry.\nYou would have to create a new custom keyword, but then you'd also have to write impelementation extensions yourself too.\n...","users":["CardamoneLuigi","jsonschema"],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1460969754420731906":{"created_at":"Wed Nov 17 13:55:07 +0000 2021","id_str":"1460969754420731906","text":"I don't want to make this thread sound like library author/maintainer bashing. They have done a lot of good work.\n\nThe name of the library is poor, and we're going to be paying for it for years to come.\n\nNaming things is hard... but important to get right.","users":[],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1460968225219481602":{"created_at":"Wed Nov 17 13:49:03 +0000 2021","id_str":"1460968225219481602","text":"...remove ALL references from a schema, but it WILL remove EXTERNAL references.\n\nIt also will not work with @OpenApiSpec documents, yet.\n\nIt is not published on npm yet either, but go watch the repo.\n\nThis is the future of JSON Schema and OpenAPI bundling.","users":["OpenApiSpec"],"urls":[],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1460968222820290563":{"created_at":"Wed Nov 17 13:49:02 +0000 2021","id_str":"1460968222820290563","text":"While @jsonschema doesn't currently provide any tooling, one of our core team decided to throw something together in a few days.\n\nStill in beta, but already has broad JSON Schema support and good starting documentation.\n\nhttps://t.co/DEVtimqDGt\n\nWhat it won't do is...","users":["jsonschema"],"urls":["https://github.com/hyperjump-io/json-schema-bundler"],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1460968220630949894":{"created_at":"Wed Nov 17 13:49:01 +0000 2021","id_str":"1460968220630949894","text":"If you use anything but very basic JSON Schemas, you're likely going to run into problems.\n\nSince this tool was created, JSON Schema defined a bundling process. I wrote about it: https://t.co/vXKWfgTgg5\n\nBut, what about tooling to support this now defined process?","users":[],"urls":["https://json-schema.org/blog/posts/bundling-json-schema-compound-documents"],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1460968218319806464":{"created_at":"Wed Nov 17 13:49:01 +0000 2021","id_str":"1460968218319806464","text":"üòï`json-schema-ref-parser` is a popular tool used to \"dereference\" a JSON Schema... but should it be?\n\nIt implements \"JSON Reference\" and \"JSON Pointer\".\nIt is NOT JSON Schema aware üò¨ https://t.co/MZIatcZz6a\n\nThe library is, frustratingly, terribly named üò¶\nüßµ...","users":[],"urls":["https://github.com/APIDevTools/json-schema-ref-parser/issues/22#issuecomment-231783185"],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1460894831262285826":{"created_at":"Wed Nov 17 08:57:24 +0000 2021","id_str":"1460894831262285826","text":"‚Äúthe service that performs underlying updates to the registry data determined which package to publish based on the contents of the uploaded package file.‚Äù - GitHub fixes authorisation vulnerability in the NPM JavaScript package registry https://t.co/QiyYw467YL","users":[],"urls":["https://buff.ly/3qGDvUI"],"engage":1,"people":["Ben Hutton"]},"1459118586950213639":{"created_at":"Fri Nov 12 11:19:14 +0000 2021","id_str":"1459118586950213639","text":"üì¢Want to write modern @jsonschema in @code?üì¢\nüëáRespond to this issue with an upvoteüëá\nhttps://t.co/RRXgNIBXyU\n\nThe issue is in the backlog, but that doesn't mean it has any priorty, and isn't scheduled work.\n\nLet's see if we can change that!?","users":["jsonschema","code"],"urls":["https://github.com/microsoft/vscode/issues/98724"],"engage":1,"components":["Issues"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118585230602244":{"created_at":"Fri Nov 12 11:19:14 +0000 2021","id_str":"1459118585230602244","text":"The Pull Request I've created will introduce the same warning for any JOSN document which identifies as using the 2020-12 dialect (JSON Schema draft 2020-12).\nhttps://t.co/KQmxPnNz4R\nIt's unexciting, but could potentially save a lot of false assurance and debugging time! ü•≥","users":[],"urls":["https://github.com/microsoft/vscode-json-languageservice/pull/117/files"],"engage":1,"components":["Pull Requests"],"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118583305408514":{"created_at":"Fri Nov 12 11:19:14 +0000 2021","id_str":"1459118583305408514","text":"I believe this is because VSCode is retreiving the 2020-12 meta-schema, and treating it as a normal JSON Schema, defaulting to the implementations most current dialect for validation processing.","users":[],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["IDE"]},"1459118580973412357":{"created_at":"Fri Nov 12 11:19:13 +0000 2021","id_str":"1459118580973412357","text":"In JSON Schema, unknown keywords are ignored.\nI explain in an issue I created today, a JSON Schema file which uses the 2020-12 dialect URI in @code will be creating a false positive in terms of validation.\n\nIt will NEVER show any validation errors.\n\nhttps://t.co/qmSNRqu2nZ https://t.co/WTwMAoN5NR","users":["code"],"urls":["https://github.com/microsoft/vscode-json-languageservice/issues/116"],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118576384753669":{"created_at":"Fri Nov 12 11:19:12 +0000 2021","id_str":"1459118576384753669","text":"This was added some two years ago: https://t.co/5LOYf9xGoS\n\nI made a PR to fix the error message around the same time: https://t.co/ukrJma2ZsZ\n\nBut, right now, there's no such warning for draft 2020-12, so what's happening?","users":[],"urls":["https://github.com/microsoft/vscode-json-languageservice/commit/fa210f6d60f65364dc131a80cc8c6f69a1a543d3","https://github.com/microsoft/vscode-json-languageservice/commit/fb1979364a789a30755226c0f8f0e1440f9e120c#diff-b6dd11a23b1afc803f544191bc3c8e2966ce065aeafd162025c21662f1c50331R402"],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118574199574536":{"created_at":"Fri Nov 12 11:19:11 +0000 2021","id_str":"1459118574199574536","text":"You might notice that in the previous images, JSON Schema draft-07 was used. This is the latest version of JSON Schema @code supports.\n\nWhen someone tries to use draft 2019-09, they get a warning against the `$schema` value, stating that it's not supported. https://t.co/TdlZiulVTw","users":["code"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118566943465473":{"created_at":"Fri Nov 12 11:19:10 +0000 2021","id_str":"1459118566943465473","text":"...you get autocomplete and validation. This is pretty neat for authoring JSON Schemas. It's also automatically applied to files at specific locations using https://t.co/fLlcUqSAZ8\n\nIt stops you making potentially silly mistakes.\nThis is the only way I write JSON Schema documents https://t.co/5skcLQZ0gm","users":[],"urls":["https://www.schemastore.org/json/"],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118562266787840":{"created_at":"Fri Nov 12 11:19:09 +0000 2021","id_str":"1459118562266787840","text":"In a recent post, someone asked about Visual Studio support for newer versions of JSON Schema. A later comment included the quote in the first part of this thread (https://t.co/hlrE2MfwTQ)\n\nIn VSCode, if the file type processing is JSON, and the root object includes `$schema`...","users":[],"urls":["https://developercommunity.visualstudio.com/t/support-json-schema-draft-06-draft-07/796216#T-N1488771"],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118560169574410":{"created_at":"Fri Nov 12 11:19:08 +0000 2021","id_str":"1459118560169574410","text":"Drafts? \nJSON Schema is released as \"drafts\" from version 1-7, then proceeding with 2019-09 and 2020-12.\n\n@code?\nVSCode allows for validation of JSON Schema baked in.\nThat's the mechansium through which you get autocomplete/intelisense AND validation in your config files üòé","users":["code"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1459118558013702160":{"created_at":"Fri Nov 12 11:19:07 +0000 2021","id_str":"1459118558013702160","text":"üßê\"@code is properly able to use JSON Schemas based on the 2020-12 draft.\"\nüò¨ I'm afraid that would be a false positive.\nüîÄ I've made a PR to hopefully avoid this in the near future!)\nüëá Let me explain...üßµ","users":["code"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1458774048851304455":{"created_at":"Thu Nov 11 12:30:10 +0000 2021","id_str":"1458774048851304455","text":"ü§î Need to make API requests which always return a specific status code?\nüòÉ Covered!\nhttps://t.co/qQtmL04Ft9\n\nEven 418 üòâ","users":[],"urls":["https://mock.codes"],"engage":1,"people":["Ben Hutton"]},"1458727289009680386":{"created_at":"Thu Nov 11 09:24:22 +0000 2021","id_str":"1458727289009680386","text":"üòéAre you using @jsonschema in production?\nü§©Want to chat about it and share the recording with the community?\n\nJust let me know! ü§ô\nI'm looking to record several over the next month ü•≥","users":["jsonschema"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1458005975424806912":{"created_at":"Tue Nov 09 09:38:07 +0000 2021","id_str":"1458005975424806912","text":"@johnconnolly @darrel_miller I suspect it's possible, but I've not seen anyone write the tooling.\nWe're trying to standardise how JSON Schema can be used for form generation. This should help library maintainers update to support newer versions, then you just have to extract schemas from your OAS doc!","users":["johnconnolly","darrel_miller"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1457751127718510604":{"created_at":"Mon Nov 08 16:45:27 +0000 2021","id_str":"1457751127718510604","text":"@kaa_a_zu In @code, start by setting the \"language mode\" to \"JSON\", then start your schema object with $schema with the version you want to use. Then you will have autocomplete for JSON Schema keywords.","users":["kaa_a_zu","code"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1456591275071787015":{"created_at":"Fri Nov 05 11:56:36 +0000 2021","id_str":"1456591275071787015","text":"About 6 years ago I created a Perl library to allow @jsonschema implementations to easily use the official test suite.\n\nToday, I'm mering a PR to the JSON Schema website to list a new Perl implementation... and it uses this library!\n\nThe code lives on!","users":["jsonschema"],"urls":[],"engage":1,"people":["Ben Hutton"],"areas":["JSON Schema"]},"1455900412662407168":{"created_at":"Wed Nov 03 14:11:22 +0000 2021","id_str":"1455900412662407168","text":"@GabbyMcNabb @platfarm_agtech @WineTasmania @farmOSorg @OpenTEAMAg @jsonschema Hey, @farmOSorg, I think I got an advert for your system. No idea why...\nBut regardless, if you need JSON Schema help, we can help > https://t.co/hs3UT8Bry0","users":["GabbyMcNabb","platfarm_agtech","WineTasmania","farmOSorg","OpenTEAMAg","jsonschema","farmOSorg"],"urls":["https://json-schema.org/slack"],"engage":1,"components":["Support"],"people":["Ben Hutton"],"areas":["JSON Schema"]}}